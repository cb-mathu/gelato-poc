import { LoginLabels, LoginFieldState } from './types';
declare const _default: {
    title: string;
    component: new () => {
        $props: Partial<{
            disabled: boolean;
            invalid: boolean;
            state: LoginFieldState;
            allowedActions: import("./types").LoginAllowedActions[];
        } & {
            onKeydown?: ((event: KeyboardEvent) => void) | undefined;
            errorMessage?: string | undefined;
            email?: string | undefined;
            labels?: LoginLabels | undefined;
            passcode?: string | undefined;
            onLoginViaOtp?: ((event: Event) => void) | undefined;
            onLoginViaPassword?: ((event: Event) => void) | undefined;
            onResendOtp?: ((event: Event) => void) | undefined;
            onProceed?: ((event: Event) => void) | undefined;
            onLogin?: ((event: Event) => void) | undefined;
            "onUpdate:email"?: ((event: Event) => void) | undefined;
            "onUpdate:passcode"?: ((event: Event) => void) | undefined;
        } & {
            onCopy?: ((payload: ClipboardEvent) => void) | undefined;
            onCut?: ((payload: ClipboardEvent) => void) | undefined;
            onPaste?: ((payload: ClipboardEvent) => void) | undefined;
            onCompositionend?: ((payload: CompositionEvent) => void) | undefined;
            onCompositionstart?: ((payload: CompositionEvent) => void) | undefined;
            onCompositionupdate?: ((payload: CompositionEvent) => void) | undefined;
            onDrag?: ((payload: DragEvent) => void) | undefined;
            onDragend?: ((payload: DragEvent) => void) | undefined;
            onDragenter?: ((payload: DragEvent) => void) | undefined;
            onDragexit?: ((payload: DragEvent) => void) | undefined;
            onDragleave?: ((payload: DragEvent) => void) | undefined;
            onDragover?: ((payload: DragEvent) => void) | undefined;
            onDragstart?: ((payload: DragEvent) => void) | undefined;
            onDrop?: ((payload: DragEvent) => void) | undefined;
            onFocus?: ((payload: FocusEvent) => void) | undefined;
            onFocusin?: ((payload: FocusEvent) => void) | undefined;
            onFocusout?: ((payload: FocusEvent) => void) | undefined;
            onBlur?: ((payload: FocusEvent) => void) | undefined;
            onChange?: ((payload: Event) => void) | undefined;
            onBeforeinput?: ((payload: Event) => void) | undefined;
            onInput?: ((payload: Event) => void) | undefined;
            onReset?: ((payload: Event) => void) | undefined;
            onSubmit?: ((payload: Event) => void) | undefined;
            onInvalid?: ((payload: Event) => void) | undefined;
            onLoad?: ((payload: Event) => void) | undefined;
            onError?: ((payload: Event) => void) | undefined;
            onKeydown?: ((payload: KeyboardEvent) => void) | undefined;
            onKeypress?: ((payload: KeyboardEvent) => void) | undefined;
            onKeyup?: ((payload: KeyboardEvent) => void) | undefined;
            onAuxclick?: ((payload: MouseEvent) => void) | undefined;
            onClick?: ((payload: MouseEvent) => void) | undefined;
            onContextmenu?: ((payload: MouseEvent) => void) | undefined;
            onDblclick?: ((payload: MouseEvent) => void) | undefined;
            onMousedown?: ((payload: MouseEvent) => void) | undefined;
            onMouseenter?: ((payload: MouseEvent) => void) | undefined;
            onMouseleave?: ((payload: MouseEvent) => void) | undefined;
            onMousemove?: ((payload: MouseEvent) => void) | undefined;
            onMouseout?: ((payload: MouseEvent) => void) | undefined;
            onMouseover?: ((payload: MouseEvent) => void) | undefined;
            onMouseup?: ((payload: MouseEvent) => void) | undefined;
            onAbort?: ((payload: Event) => void) | undefined;
            onCanplay?: ((payload: Event) => void) | undefined;
            onCanplaythrough?: ((payload: Event) => void) | undefined;
            onDurationchange?: ((payload: Event) => void) | undefined;
            onEmptied?: ((payload: Event) => void) | undefined;
            onEncrypted?: ((payload: Event) => void) | undefined;
            onEnded?: ((payload: Event) => void) | undefined;
            onLoadeddata?: ((payload: Event) => void) | undefined;
            onLoadedmetadata?: ((payload: Event) => void) | undefined;
            onLoadstart?: ((payload: Event) => void) | undefined;
            onPause?: ((payload: Event) => void) | undefined;
            onPlay?: ((payload: Event) => void) | undefined;
            onPlaying?: ((payload: Event) => void) | undefined;
            onProgress?: ((payload: Event) => void) | undefined;
            onRatechange?: ((payload: Event) => void) | undefined;
            onSeeked?: ((payload: Event) => void) | undefined;
            onSeeking?: ((payload: Event) => void) | undefined;
            onStalled?: ((payload: Event) => void) | undefined;
            onSuspend?: ((payload: Event) => void) | undefined;
            onTimeupdate?: ((payload: Event) => void) | undefined;
            onVolumechange?: ((payload: Event) => void) | undefined;
            onWaiting?: ((payload: Event) => void) | undefined;
            onSelect?: ((payload: Event) => void) | undefined;
            onScroll?: ((payload: UIEvent) => void) | undefined;
            onTouchcancel?: ((payload: TouchEvent) => void) | undefined;
            onTouchend?: ((payload: TouchEvent) => void) | undefined;
            onTouchmove?: ((payload: TouchEvent) => void) | undefined;
            onTouchstart?: ((payload: TouchEvent) => void) | undefined;
            onPointerdown?: ((payload: PointerEvent) => void) | undefined;
            onPointermove?: ((payload: PointerEvent) => void) | undefined;
            onPointerup?: ((payload: PointerEvent) => void) | undefined;
            onPointercancel?: ((payload: PointerEvent) => void) | undefined;
            onPointerenter?: ((payload: PointerEvent) => void) | undefined;
            onPointerleave?: ((payload: PointerEvent) => void) | undefined;
            onPointerover?: ((payload: PointerEvent) => void) | undefined;
            onPointerout?: ((payload: PointerEvent) => void) | undefined;
            onWheel?: ((payload: WheelEvent) => void) | undefined;
            onAnimationstart?: ((payload: AnimationEvent) => void) | undefined;
            onAnimationend?: ((payload: AnimationEvent) => void) | undefined;
            onAnimationiteration?: ((payload: AnimationEvent) => void) | undefined;
            onTransitionend?: ((payload: TransitionEvent) => void) | undefined;
            onTransitionstart?: ((payload: TransitionEvent) => void) | undefined;
        } & import("vue").AllowedComponentProps & import("vue").VNodeProps & {
            class: string;
        } & {
            id?: string | undefined;
        } & {
            id?: string | undefined;
            class?: any;
            onCopy?: ((payload: ClipboardEvent) => void) | undefined;
            onCut?: ((payload: ClipboardEvent) => void) | undefined;
            onPaste?: ((payload: ClipboardEvent) => void) | undefined;
            onCompositionend?: ((payload: CompositionEvent) => void) | undefined;
            onCompositionstart?: ((payload: CompositionEvent) => void) | undefined;
            onCompositionupdate?: ((payload: CompositionEvent) => void) | undefined;
            onDrag?: ((payload: DragEvent) => void) | undefined;
            onDragend?: ((payload: DragEvent) => void) | undefined;
            onDragenter?: ((payload: DragEvent) => void) | undefined;
            onDragexit?: ((payload: DragEvent) => void) | undefined;
            onDragleave?: ((payload: DragEvent) => void) | undefined;
            onDragover?: ((payload: DragEvent) => void) | undefined;
            onDragstart?: ((payload: DragEvent) => void) | undefined;
            onDrop?: ((payload: DragEvent) => void) | undefined;
            onFocus?: ((payload: FocusEvent) => void) | undefined;
            onFocusin?: ((payload: FocusEvent) => void) | undefined;
            onFocusout?: ((payload: FocusEvent) => void) | undefined;
            onBlur?: ((payload: FocusEvent) => void) | undefined;
            onChange?: ((payload: Event) => void) | undefined;
            onBeforeinput?: ((payload: Event) => void) | undefined;
            onInput?: ((payload: Event) => void) | undefined;
            onReset?: ((payload: Event) => void) | undefined;
            onSubmit?: ((payload: Event) => void) | undefined;
            onInvalid?: ((payload: Event) => void) | undefined;
            onLoad?: ((payload: Event) => void) | undefined;
            onError?: ((payload: Event) => void) | undefined;
            onKeypress?: ((payload: KeyboardEvent) => void) | undefined;
            onKeyup?: ((payload: KeyboardEvent) => void) | undefined;
            onAuxclick?: ((payload: MouseEvent) => void) | undefined;
            onClick?: ((payload: MouseEvent) => void) | undefined;
            onContextmenu?: ((payload: MouseEvent) => void) | undefined;
            onDblclick?: ((payload: MouseEvent) => void) | undefined;
            onMousedown?: ((payload: MouseEvent) => void) | undefined;
            onMouseenter?: ((payload: MouseEvent) => void) | undefined;
            onMouseleave?: ((payload: MouseEvent) => void) | undefined;
            onMousemove?: ((payload: MouseEvent) => void) | undefined;
            onMouseout?: ((payload: MouseEvent) => void) | undefined;
            onMouseover?: ((payload: MouseEvent) => void) | undefined;
            onMouseup?: ((payload: MouseEvent) => void) | undefined;
            onAbort?: ((payload: Event) => void) | undefined;
            onCanplay?: ((payload: Event) => void) | undefined;
            onCanplaythrough?: ((payload: Event) => void) | undefined;
            onDurationchange?: ((payload: Event) => void) | undefined;
            onEmptied?: ((payload: Event) => void) | undefined;
            onEncrypted?: ((payload: Event) => void) | undefined;
            onEnded?: ((payload: Event) => void) | undefined;
            onLoadeddata?: ((payload: Event) => void) | undefined;
            onLoadedmetadata?: ((payload: Event) => void) | undefined;
            onLoadstart?: ((payload: Event) => void) | undefined;
            onPause?: ((payload: Event) => void) | undefined;
            onPlay?: ((payload: Event) => void) | undefined;
            onPlaying?: ((payload: Event) => void) | undefined;
            onProgress?: ((payload: Event) => void) | undefined;
            onRatechange?: ((payload: Event) => void) | undefined;
            onSeeked?: ((payload: Event) => void) | undefined;
            onSeeking?: ((payload: Event) => void) | undefined;
            onStalled?: ((payload: Event) => void) | undefined;
            onSuspend?: ((payload: Event) => void) | undefined;
            onTimeupdate?: ((payload: Event) => void) | undefined;
            onVolumechange?: ((payload: Event) => void) | undefined;
            onWaiting?: ((payload: Event) => void) | undefined;
            onSelect?: ((payload: Event) => void) | undefined;
            onScroll?: ((payload: UIEvent) => void) | undefined;
            onTouchcancel?: ((payload: TouchEvent) => void) | undefined;
            onTouchend?: ((payload: TouchEvent) => void) | undefined;
            onTouchmove?: ((payload: TouchEvent) => void) | undefined;
            onTouchstart?: ((payload: TouchEvent) => void) | undefined;
            onPointerdown?: ((payload: PointerEvent) => void) | undefined;
            onPointermove?: ((payload: PointerEvent) => void) | undefined;
            onPointerup?: ((payload: PointerEvent) => void) | undefined;
            onPointercancel?: ((payload: PointerEvent) => void) | undefined;
            onPointerenter?: ((payload: PointerEvent) => void) | undefined;
            onPointerleave?: ((payload: PointerEvent) => void) | undefined;
            onPointerover?: ((payload: PointerEvent) => void) | undefined;
            onPointerout?: ((payload: PointerEvent) => void) | undefined;
            onWheel?: ((payload: WheelEvent) => void) | undefined;
            onAnimationstart?: ((payload: AnimationEvent) => void) | undefined;
            onAnimationend?: ((payload: AnimationEvent) => void) | undefined;
            onAnimationiteration?: ((payload: AnimationEvent) => void) | undefined;
            onTransitionend?: ((payload: TransitionEvent) => void) | undefined;
            onTransitionstart?: ((payload: TransitionEvent) => void) | undefined;
            innerHTML?: string | undefined;
            style?: (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | (string | import("vue").CSSProperties | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined;
            accesskey?: string | undefined;
            contenteditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextmenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            hidden?: (boolean | "true" | "false") | undefined;
            lang?: string | undefined;
            placeholder?: string | undefined;
            spellcheck?: (boolean | "true" | "false") | undefined;
            tabindex?: (string | number) | undefined;
            title?: string | undefined;
            translate?: "yes" | "no" | undefined;
            radiogroup?: string | undefined;
            role?: string | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autocapitalize?: string | undefined;
            autocorrect?: string | undefined;
            autocave?: string | undefined;
            color?: string | undefined;
            itemprop?: string | undefined;
            itemscope?: (boolean | "true" | "false") | undefined;
            itemtype?: string | undefined;
            itemid?: string | undefined;
            itemref?: string | undefined;
            results?: (string | number) | undefined;
            security?: string | undefined;
            unselectable?: "off" | "on" | undefined;
            inputmode?: "text" | "none" | "email" | "tel" | "search" | "url" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: "mixed" | (boolean | "true" | "false") | undefined;
            'aria-colcount'?: (string | number) | undefined;
            'aria-colindex'?: (string | number) | undefined;
            'aria-colspan'?: (string | number) | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: "time" | "step" | (boolean | "true" | "false") | "page" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: "dialog" | "menu" | (boolean | "true" | "false") | "listbox" | "tree" | "grid" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: (boolean | "true" | "false") | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: (string | number) | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: (string | number) | undefined;
            'aria-pressed'?: "mixed" | (boolean | "true" | "false") | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "text" | "additions" | "additions text" | "all" | "removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: (string | number) | undefined;
            'aria-rowindex'?: (string | number) | undefined;
            'aria-rowspan'?: (string | number) | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: (string | number) | undefined;
            'aria-sort'?: "none" | "other" | "ascending" | "descending" | undefined;
            'aria-valuemax'?: (string | number) | undefined;
            'aria-valuemin'?: (string | number) | undefined;
            'aria-valuenow'?: (string | number) | undefined;
            'aria-valuetext'?: string | undefined;
        }>;
    };
    argTypes: {
        email: {
            control: string;
            description: string;
            defaultValue: string;
        };
        disabled: {
            control: string;
            description: string;
            defaultValue: boolean;
        };
        state: {
            control: string;
            options: typeof LoginFieldState;
            defaultValue: LoginFieldState;
        };
    };
};
export default _default;
export declare const Story: (args: any) => {
    setup(): () => JSX.Element;
};
